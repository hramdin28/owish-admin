{"remainingRequest":"/Users/hanishramdin/Documents/vue-workspace/owish/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hanishramdin/Documents/vue-workspace/owish/src/components/HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=scss&","dependencies":[{"path":"/Users/hanishramdin/Documents/vue-workspace/owish/src/components/HelloWorld.vue","mtime":1576356504704},{"path":"/Users/hanishramdin/Documents/vue-workspace/owish/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hanishramdin/Documents/vue-workspace/owish/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/hanishramdin/Documents/vue-workspace/owish/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/hanishramdin/Documents/vue-workspace/owish/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hanishramdin/Documents/vue-workspace/owish/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hanishramdin/Documents/vue-workspace/owish/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKaDMgewogIG1hcmdpbjogNDBweCAwIDA7Cn0KdWwgewogIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsKICBwYWRkaW5nOiAwOwp9CmxpIHsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgbWFyZ2luOiAwIDEwcHg7Cn0KYSB7CiAgY29sb3I6ICM0MmI5ODM7Cn0K"},{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div id=\"main-content\" class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-md-6\">\n          <form class=\"form-inline\">\n            <div class=\"form-group\">\n              <label for=\"connect\">WebSocket connection:</label>\n              <button\n                id=\"connect\"\n                class=\"btn btn-default\"\n                type=\"submit\"\n                :disabled=\"connected == true\"\n                @click.prevent=\"connect\"\n              >Connect</button>\n              <button\n                id=\"disconnect\"\n                class=\"btn btn-default\"\n                type=\"submit\"\n                :disabled=\"connected == false\"\n                @click.prevent=\"disconnect\"\n              >Disconnect</button>\n            </div>\n          </form>\n        </div>\n        <div class=\"col-md-6\">\n          <form class=\"form-inline\">\n            <div class=\"form-group\">\n              <label for=\"name\">What is your name?</label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                class=\"form-control\"\n                v-model=\"send_message\"\n                placeholder=\"Your name here...\"\n              >\n            </div>\n            <button id=\"send\" class=\"btn btn-default\" type=\"submit\" @click.prevent=\"send\">Send</button>\n          </form>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <table id=\"conversation\" class=\"table table-striped\">\n            <thead>\n              <tr>\n                <th>Greetings</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr v-for=\"item in received_messages\" :key=\"item\">\n                <td>{{ item }}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport SockJS from \"sockjs-client\";\nimport Stomp from \"webstomp-client\";\n\nexport default {\n  name: \"websocketdemo\",\n  data() {\n    return {\n      received_messages: [],\n      send_message: null,\n      connected: false\n    };\n  },\n  methods: {\n    send() {\n      if (this.stompClient && this.stompClient.connected) {\n        const msg = { name: this.send_message };\n        this.stompClient.send(\"/topic/wishes/\", JSON.stringify(msg), {});\n      }\n    },\n    connect() {\n      this.socket = new SockJS(\"http://localhost:8080/wl-websocket\");\n\n      this.socket.onmessage = function(e) {\n        // eslint-disable-next-line no-console\n        console.log(\"message\", e.data);\n      };\n\n      this.stompClient = Stomp.over(this.socket);\n      this.stompClient.connect(\n        {},\n        frame => {\n          this.connected = true;\n          this.stompClient.subscribe(\"/topic/wishes/\", tick => {\n            // eslint-disable-next-line no-console\n            console.log(tick);\n            this.received_messages.push(JSON.parse(tick.body).content);\n          });\n        },\n        error => {\n          this.connected = false;\n        }\n      );\n    },\n    disconnect() {\n      if (this.stompClient) {\n        this.stompClient.disconnect();\n      }\n      this.connected = false;\n    },\n    tickleConnection() {\n      this.connected ? this.disconnect() : this.connect();\n    }\n  },\n  mounted() {\n    this.connect();\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"]}]}